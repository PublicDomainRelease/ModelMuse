      MODULE GWFFHBMODULE
        INTEGER, SAVE, POINTER ::NBDTIM,NFLW,NHED,IFHBCB,NFHBX1,
     1                           NFHBX2,IFHBSS
        INTEGER, SAVE, POINTER, DIMENSION(:,:)  ::IFLLOC
        INTEGER, SAVE, POINTER, DIMENSION(:,:)  ::IHDLOC
        REAL,    SAVE, POINTER, DIMENSION(:)    ::BDTIM
        REAL,    SAVE, POINTER, DIMENSION(:,:)  ::FLWRAT
        REAL,    SAVE, POINTER, DIMENSION(:,:)  ::SBHED
        REAL,    SAVE, POINTER, DIMENSION(:,:)  ::BDFV
        REAL,    SAVE, POINTER, DIMENSION(:,:)  ::BDHV
        REAL,    SAVE, POINTER, DIMENSION(:)  ::FHBXWT
        CHARACTER(LEN=16), SAVE, POINTER, DIMENSION(:) ::FHBXNM
      TYPE GWFFHBTYPE
        INTEGER, POINTER ::NBDTIM,NFLW,NHED,IFHBCB,NFHBX1,
     1                           NFHBX2,IFHBSS
        INTEGER, POINTER, DIMENSION(:,:)  ::IFLLOC
        INTEGER, POINTER, DIMENSION(:,:)  ::IHDLOC
        REAL,    POINTER, DIMENSION(:)    ::BDTIM
        REAL,    POINTER, DIMENSION(:,:)  ::FLWRAT
        REAL,    POINTER, DIMENSION(:,:)  ::SBHED
        REAL,    POINTER, DIMENSION(:,:)  ::BDFV
        REAL,    POINTER, DIMENSION(:,:)  ::BDHV
        REAL,    POINTER, DIMENSION(:)  ::FHBXWT
        CHARACTER(LEN=16), POINTER, DIMENSION(:) ::FHBXNM
      END TYPE
      TYPE(GWFFHBTYPE), SAVE  ::GWFFHBDAT(10)
      END MODULE


      SUBROUTINE GWF2FHB7AR(IN,IGRID)
C     ******************************************************************
C     ALLOCATE ARRAY STORAGE AND READ DATA FOR FLOW AND HEAD BOUNDARY
C     PACKAGE
C     ******************************************************************
C
C        SPECIFICATIONS:
C     ------------------------------------------------------------------
      USE GLOBAL,      ONLY:IOUT,ITRSS,IBOUND
      USE GWFFHBMODULE,ONLY:NBDTIM,NFLW,NHED,IFHBCB,NFHBX1,NFHBX2,
     1                      IFHBSS,IFLLOC,IHDLOC,BDTIM,FLWRAT,SBHED,
     2                      BDFV,BDHV,FHBXWT,FHBXNM
C
      CHARACTER*80 LINE
      CHARACTER*1 DSH1
      DATA DSH1/'-'/
C     ------------------------------------------------------------------
      ALLOCATE(NBDTIM,NFLW,NHED,IFHBCB,NFHBX1,NFHBX2,IFHBSS)
      ALLOCATE(FHBXWT(10))
      ALLOCATE(FHBXNM(10))
C
C1------IDENTIFY PACKAGE
      WRITE(IOUT,*)'FHB:'
!      WRITE(IOUT,1)IN
!    1 FORMAT(1X,/1X,'FHB1 -- SPECIFIED FLOW PACKAGE, VERSION 1,12/3/96',
!     &' INPUT READ FROM',I3)
C
C2------READ NUMBER OF TIMES, NUMBER OF SPECIFIED-FLOW CELLS AND
C2------UNIT OR FLAG FOR CELL-BY-CELL FLOW TERMS, NUMBER OF 
C2------AUXILIARY VARIABLES.
      READ(IN,*) NBDTIM,NFLW,NHED,IFHBSS,IFHBCB,NFHBX1,NFHBX2
      WRITE(IOUT,*) 'NBDTIM,NFLW,NHED,IFHBSS,IFHBCB,NFHBX1,NFHBX2:'
      WRITE(IOUT,*) NBDTIM,NFLW,NHED,IFHBSS,IFHBCB,NFHBX1,NFHBX2
C
C3------PRINT NBDTIM, STOP IF NO TIMES ARE TO BE SPECIFIED 
      IF(NFLW.LT.1.AND.NHED.LT.1) THEN
!         WRITE(IOUT,4)
! 4       FORMAT(1X,'SPECIFIED FLOW AND HEAD BOUNDARY OPTION ',
!     &   'CANCELLED.',/,1X,'NO BOUNDARY CELLS WERE SPECIFIED.')
         IN=0
         RETURN
      ENDIF
      IF(NBDTIM.LT.1) THEN
         WRITE(IOUT,6)
 6       FORMAT(1X, 'SIMULATION ABORTING.  NOT ENOUGH TIMES ',
     &   'SPECIFIED FOR FHB1 PACKAGE.')
         CALL USTOP(' ')
!      ELSE IF(NBDTIM.EQ.1) THEN
!         WRITE(IOUT,8)
! 8       FORMAT(1X,' SPECIFIED FLOW AND HEAD VALUES WILL REMAIN ',
!     &   'CONSTANT FOR ENTIRE SIMULATION.')
!      ELSE
!         WRITE(IOUT,10) NBDTIM
! 10      FORMAT(1H ,'TOTAL OF',I5,' TIMES WILL BE USED TO DEFINE ',
!     &   'VARIATIONS IN FLOW AND HEAD.')
      ENDIF
C
C4------PRINT NFLW AND NHED AND STEADY-STATE OPTION
CERB  This section was changed to use ITRSS instead of ISS
CERB  I also eliminated use of Hollerith constants -- ERB 10/8/2002
!      WRITE(IOUT,12) NFLW
! 12   FORMAT(1X,'FLOW WILL BE SPECIFIED AT A TOTAL OF',I5,' CELLS.')
!      WRITE(IOUT,14) NHED
! 14   FORMAT(1X,'HEAD WILL BE SPECIFIED AT A TOTAL OF',I5,' CELLS.')
!      IF(ITRSS.NE.0) THEN
!        WRITE(IOUT,15)
! 15     FORMAT(1X,'FHB STEADY-STATE OPTION FLAG WILL BE IGNORED,'/,
!     &          1X,'AT LEAST ONE STRESS PERIOD IS TRANSIENT.')
!      ELSE
!        IF(IFHBSS.EQ.0) THEN
!          WRITE(IOUT,16)
! 16       FORMAT(1X,'FLOW, HEAD, AND AUX VARIABLES AT TIME=0 WILL BE ',
!     &        /,1X,'USED IN STEADY-STATE SIMULATIONS.')
!        ELSE
!          WRITE(IOUT,18)
! 18       FORMAT(1X,'FLOW, HEAD, AND AUX VARIABLES WILL BE ',
!     &      'INTERPOLATED',/,1X,'IN SIMULATIONS.')
!        ENDIF
!      ENDIF
CERB  End of changed section
C
C5------IF CELL-BY-CELL FLOW TERMS ARE TO BE SAVED THEN PRINT UNIT #
!      IF(IFHBCB.GT.0) WRITE(IOUT,20) IFHBCB
! 20   FORMAT(1X,'CELL-BY-CELL FLOWS WILL BE RECORDED ON UNIT',I3)
!      IF(IFHBCB.LT.0) WRITE(IOUT,24)
! 24   FORMAT(1X,'CELL-BY-CELL FLOWS WILL BE PRINTED WHEN ICBCFL NOT 0')
C
C6------READ AUXILIARY VARIABLES
      IF(NFHBX1.GT.5.OR.NFHBX2.GT.5) THEN
         WRITE(IOUT,*) ' ABORTING. A MAXIMUM OF 5 AUXILIARY VARIABLES',
     &   ' CAN BE DEFINED BY FHB.'
         CALL USTOP(' ')
      ENDIF
!      WRITE(IOUT,26) NFHBX1
! 26   FORMAT(1X,I2,' AUXILIARY VARIABLES FOR SPECIFIED-FLOW CELLS WILL',
!     & /,'  BE DEFINED BY FHB FOR USE BY OTHER PACKAGES.')
      IF(NFHBX1.LT.1) GO TO 38
!      WRITE(IOUT,28)
! 28   FORMAT('       NAME      WEIGHTING FACTOR',/,1X,32('-'))
      DO 30 NX=1,NFHBX1
      READ(IN,'(A)') LINE
      LLOC=1
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,1,N,R,IOUT,IN)
      FHBXNM(NX)=LINE(ISTART:ISTOP)
	WRITE(IOUT, *) 'FHBXNM(NX):'
	WRITE(IOUT, *) FHBXNM(NX)
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,3,N,FHBXWT(NX),IOUT,IN)
	WRITE(IOUT, *) 'FHBXWT(NX):'
	WRITE(IOUT, *) FHBXWT(NX)
!      WRITE(IOUT,29) FHBXNM(NX),FHBXWT(NX)
! 29   FORMAT(1X,A16,F11.2)
      IF(FHBXWT(NX).LT.0.0.OR.FHBXWT(NX).GT.1.0) THEN
      WRITE(IOUT,*) ' Aborting. Weights for Auxiliary variables cannot'
      WRITE(IOUT,*) ' be less than 0.0 or greater than 1.0.'
      CALL USTOP(' ')
      ENDIF
 30   CONTINUE
 38   continue
! 38   WRITE(IOUT,126) NFHBX2
! 126  FORMAT(1X,I2,' AUXILIARY VARIABLES FOR SPECIFIED-HEAD CELLS WILL',
!     & /,'  BE DEFINED BY FHB FOR USE BY OTHER PACKAGES.')
      IF(NFHBX2.LT.1) GO TO 200
!      WRITE(IOUT,28)
      DO 130 NX=1,NFHBX2
      READ(IN,'(A)') LINE
      LLOC=1
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,1,N,R,IOUT,IN)
      FHBXNM(5+NX)=LINE(ISTART:ISTOP)
	WRITE(IOUT, *) 'FHBXNM(5+NX):'
	WRITE(IOUT, *) FHBXNM(5+NX)
      CALL URWORD(LINE,LLOC,ISTART,ISTOP,3,N,FHBXWT(5+NX),IOUT,IN)
	WRITE(IOUT, *) 'FHBXWT(5+NX):'
	WRITE(IOUT, *) FHBXWT(5+NX)
!      WRITE(IOUT,129) FHBXNM(5+NX),FHBXWT(5+NX)
! 129  FORMAT(1X,A16,F11.2)
      IF(FHBXWT(5+NX).LT.0.0.OR.FHBXWT(5+NX).GT.1.0) THEN
      WRITE(IOUT,*) ' Aborting. Weights for Auxiliary variables cannot'
      WRITE(IOUT,*) ' be less than 0.0 or greater than 1.0.'
      CALL USTOP(' ')
      ENDIF
 130  CONTINUE
C7------ALLOCATE SPACE FOR ARRAYS BDTIM, IFLLOC, FLWRAT, BDFV,
C7------IHDLOC, SBHED, AND BDHV
 200  IFHBD3=NBDTIM*(1+NFHBX1)
      IFHBD4=2+NFHBX1
      IFHBD5=NBDTIM*(1+NFHBX2)
      IF(NFLW.GT.0) THEN
         ALLOCATE(FLWRAT(IFHBD3,NFLW))
         ALLOCATE(BDFV(IFHBD4,NFLW))
         ALLOCATE(IFLLOC(4,NFLW))
      ELSE
         ALLOCATE(FLWRAT(1,1))
         ALLOCATE(BDFV(1,1))
         ALLOCATE(IFLLOC(1,1))
      END IF
      IF(NHED.GT.0) THEN
         ALLOCATE(SBHED(IFHBD5,NHED))
         ALLOCATE(BDHV(NFHBX2,NHED))
         ALLOCATE(IHDLOC(4,NHED))
      ELSE
         ALLOCATE(SBHED(1,1))
         ALLOCATE(BDHV(1,1))
         ALLOCATE(IHDLOC(1,1))
      END IF
      ALLOCATE(BDTIM(NBDTIM))
C
C1------READ TIMES AT WHICH SPECIFIED FLOW AND HEAD VALUES WILL BE READ
      READ(IN,*) IFHBUN,CNSTM,IFHBPT
      WRITE(IOUT,*) 'IFHBUN,IFHBPT:'
      WRITE(IOUT,*) IFHBUN,IFHBPT
!      WRITE(IOUT,310) IFHBUN,CNSTM
!310   FORMAT(1X,'TIMES FOR SPECIFIED-FLOW AND HEAD VALUES WILL BE READ',
!     & ' ON UNIT',I4,' AND',/,
!     &' MULTIPLIED BY',G12.4,'.')
      READ(IFHBUN,*) (BDTIM(L),L=1,NBDTIM)
      DO 312 L=1,NBDTIM
      BDTIM(L)=BDTIM(L)*CNSTM
312   CONTINUE
      WRITE(IOUT,*) '(BDTIM(L),L=1,NBDTIM):'
      WRITE(IOUT,*) (BDTIM(L),L=1,NBDTIM)
C
C2------IF DESIRED, PRINT TABLE OF TIMES
!      IF(IFHBPT.GT.0) THEN
!         WRITE(IOUT,320) NBDTIM
!320      FORMAT(1X,I5,' TIMES FOR SPECIFYING FLOWS AND HEADS:')
!         WRITE(IOUT,322) (L,L=1,NBDTIM)
!322      FORMAT(16X,I8,4I12)
!         ND=MIN0(60,NBDTIM*12)
!         WRITE(IOUT,324) (DSH1,M=1,ND)
!324      FORMAT(17X,60A1)
!         WRITE(IOUT,326) (BDTIM(L),L=1,NBDTIM)
!326      FORMAT(17X,5G12.4)
!      ENDIF
C
C3------MAKE SURE THAT FIRST TIME IS ZERO AND THAT TIMES INCREASE
      ICHK1=0
      ICHK2=0
      IF(BDTIM(1).NE.0.0) THEN
         WRITE(IOUT,330)
330      FORMAT(1X,'STARTING TIME FOR SPECIFIED FLOWS AND HEADS MUST',
     &   ' BE ZERO. ABORTING.')
         ICHK1=1
      ENDIF
      DO 40 L=2,NBDTIM
      IF(BDTIM(L).LT.BDTIM(L-1)) THEN
         WRITE(IOUT,32)
 32      FORMAT(1X,'TIMES FOR SPECIFIED FLOWS MUST INCREASE.',
     &   '  ABORTING.')
         ICHK2=1
         GO TO 42
      ENDIF
 40   CONTINUE
 42   IF(ICHK1.EQ.1.OR.ICHK2.EQ.1) CALL USTOP(' ')
C
C4A-----READ CELL INDICIES AND SPECIFIED-FLOW RATES
      IF(NFLW.LT.1) GO TO 70
      READ(IN,*) IFHBUN,CNSTM,IFHBPT
      WRITE(IOUT,*) 'IFHBUN,IFHBPT1:'
      WRITE(IOUT,*) IFHBUN,IFHBPT
!      WRITE(IOUT,50) IFHBUN,CNSTM
! 50   FORMAT(/,1X,'CELL INDICIES AND SPECIFIED-FLOW RATES ',
!     & 'WILL BE READ ON UNIT',I4,'. RATES WILL',/,
!     & 1X,'BE MULTIPLIED BY',G12.4,'.')
!      IF(IFHBPT.GT.0) THEN
!         WRITE(IOUT,52)
! 52      FORMAT(1X,'LAYER  ROW  COL IAUX              FLOW RATES')
!         ND=MIN0(79,19+NBDTIM*12)
!         WRITE(IOUT,54) (DSH1,M=1,ND)
! 54      FORMAT(1X,78A1)
!      ENDIF
      DO 59 N=1,NFLW
      READ(IFHBUN,*) (IFLLOC(I,N),I=1,4),(FLWRAT(L,N),L=1,NBDTIM)
      DO 56 L=1,NBDTIM
      FLWRAT(L,N)=FLWRAT(L,N)*CNSTM
 56   CONTINUE
      WRITE(IOUT,*) '(IFLLOC(I,N),I=1,4),(FLWRAT(L,N),L=1,NBDTIM):'
      WRITE(IOUT,*) (IFLLOC(I,N),I=1,4)
      WRITE(IOUT,*) (FLWRAT(L,N),L=1,NBDTIM)
C
C4B-----IF DESIRED, PRINT TABLE OF SPECIFIED-FLOW CELL LOCATIONS
C4B-----AND RATES
!      IF(IFHBPT.GT.0) THEN
!         WRITE(IOUT,58) (IFLLOC(I,N),I=1,4),(FLWRAT(L,N),L=1,NBDTIM)
! 58      FORMAT(1X,I4,3I5,5G12.4,/,(20X,5G12.4))
!      ENDIF
 59   CONTINUE
C
C5A------READ VALUES OF AUXILIARY VARIABLES FOR SPECIFIED-FLOW CELLS
      IF(NFHBX1.LT.1) GO TO 70
      DO 69 NX=1,NFHBX1
      NS=NBDTIM*NX
      READ(IN,*) IFHBUN,CNSTM,IFHBPT
!!      WRITE(IOUT,*) 'IFHBUN,IFHBPT2:'
!!      WRITE(IOUT,*) IFHBUN,IFHBPT
!      WRITE(IOUT,61) FHBXNM(NX),IFHBUN,CNSTM
! 61   FORMAT(/,1X,A16,
!     & 'FOR SPECIFIED-FLOW CELLS WILL BE READ ON UNIT',I4,'.',/,
!     &  ' VALUES WILL BE MULTIPLIED BY',G12.4,'.')
      IF(IFHBPT.GT.0) THEN
!!         WRITE(IOUT,*) 'FHBXNM(NX):'
!!         WRITE(IOUT,*) FHBXNM(NX)
!         WRITE(IOUT,62) FHBXNM(NX)
! 62      FORMAT(1X,'LAYER  ROW  COL IAUX  ',A16)
!!         WRITE(IOUT,*) '(DSH1,M=1,ND):'
!!         WRITE(IOUT,*) (DSH1,M=1,ND)
!         WRITE(IOUT,54) (DSH1,M=1,ND)
      ENDIF
      DO 68 N=1,NFLW
      READ(IFHBUN,*) (FLWRAT(NS+L,N),L=1,NBDTIM)
      DO 66 L=1,NBDTIM
      FLWRAT(NS+L,N)=FLWRAT(NS+L,N)*CNSTM
 66   CONTINUE
!      WRITE(IOUT,*) (FLWRAT(NS+L,N),L=1,NBDTIM)
C
C5B------IF DESIRED, PRINT TABLE OF AUXILIARY VARIABLE VALUES AT
C5B------SPECIFIED-FLOW CELL LOCATIONS
!!      WRITE(IOUT,*) 
!!     &    '(IFLLOC(I,N),I=1,4),(FLWRAT(NS+L,N),L=1,NBDTIM):'
!!      WRITE(IOUT,*) 
!!     &    (IFLLOC(I,N),I=1,4),(FLWRAT(NS+L,N),L=1,NBDTIM)
!      IF(IFHBPT.GT.0) THEN
!         WRITE(IOUT,58) (IFLLOC(I,N),I=1,4),
!     &                        (FLWRAT(NS+L,N),L=1,NBDTIM)
!       ENDIF
 68   CONTINUE
 69   CONTINUE
C
C6------READ CELL INDICIES AND SPECIFIED-HEAD VALUES
 70   IF(NHED.LT.1) GO TO 300
      READ(IN,*) IFHBUN,CNSTM,IFHBPT
      WRITE(IOUT,*) 'IFHBUN,IFHBPT3:'
      WRITE(IOUT,*) IFHBUN,IFHBPT
!      WRITE(IOUT,71) IFHBUN,CNSTM
! 71   FORMAT(/,1X,'CELL INDICIES AND SPECIFIED-HEAD VALUES ',
!     & 'WILL BE READ ON UNIT',I4,'. HEAD VALUES',/,
!     & 1X,'WILL BE MULTIPLIED BY',G12.4,'.')
      IF(IFHBPT.GT.0) THEN
!         WRITE(IOUT,72)
! 72      FORMAT(1X,'LAYER  ROW  COL IAUX             HEAD VALUES')
         ND=MIN0(79,19+NBDTIM*12)
!!         WRITE(IOUT,*) '(DSH1,M=1,ND):'
!!         WRITE(IOUT,*) (DSH1,M=1,ND)
!         WRITE(IOUT,74) (DSH1,M=1,ND)
 74      FORMAT(1X,79A1)
      ENDIF
      DO 80 N=1,NHED
      READ(IFHBUN,*) (IHDLOC(I,N),I=1,4),(SBHED(L,N),L=1,NBDTIM)
      DO 75 L=1,NBDTIM
      SBHED(L,N)=SBHED(L,N)*CNSTM
 75   CONTINUE
      WRITE(IOUT,*) '(IHDLOC(I,N),I=1,4),(SBHED(L,N),L=1,NBDTIM):'
      WRITE(IOUT,*) (IHDLOC(I,N),I=1,4)
      WRITE(IOUT,*) (SBHED(L,N),L=1,NBDTIM)
C
C7------AT SPECIFIED-HEAD LOCATIONS, SET IBOUND TO NEGATIVE NUMBER.
C7------IGNORE SPECIFIED-HEAD CONDITIONS AT CELLS WHERE IBOUND IS ZERO
      K=IHDLOC(1,N)
      I=IHDLOC(2,N)
      J=IHDLOC(3,N)
      IF(IBOUND(J,I,K).NE.0) THEN
         IBOUND(J,I,K)=-IABS(IBOUND(J,I,K))
!      ELSE
!         WRITE(IOUT,76) IHDLOC(2,N),IHDLOC(3,N),IHDLOC(1,N)
! 76      FORMAT(1X,'SPECIFIED-HEAD VALUE IGNORED AT ROW',I5,', COLUMN',
!     &   I5,', AND LAYER',I5,'.')
      ENDIF
C
C8------IF DESIRED, PRINT TABLE OF SPECIFIED-FLOW CELL LOCATIONS
C8------AND RATES
!      IF(IFHBPT.GT.0) THEN
!         IF(IBOUND(J,I,K).NE.0) 
!     &   WRITE(IOUT,58) (IHDLOC(I,N),I=1,4),(SBHED(L,N),L=1,NBDTIM)
!      ENDIF
 80   CONTINUE
C
C9A------READ VALUES OF AUXILIARY VARIABLES FOR SPECIFIED-HEAD CELLS
      IF(NFHBX2.LT.1) GO TO 300
      DO 169 NX=1,NFHBX2
      NS=NBDTIM*NX
      READ(IN,*) IFHBUN,CNSTM,IFHBPT
!!      WRITE(IOUT,*) 'IFHBUN,IFHBPT4:'
!!      WRITE(IOUT,*) IFHBUN,IFHBPT
!      WRITE(IOUT,161) FHBXNM(5+NX),IFHBUN,CNSTM
! 161  FORMAT(/,1X,A16,
!     & 'FOR SPECIFIED-HEAD CELLS WILL BE READ ON UNIT',I4,'.',/,
!     &  ' VALUES WILL BE MULTIPLIED BY',G12.4,'.')
      IF(IFHBPT.GT.0) THEN
!         WRITE(IOUT,62) FHBXNM(5+NX)
!         WRITE(IOUT,54) (DSH1,M=1,ND)
      ENDIF
      DO 168 N=1,NHED
      READ(IFHBUN,*) (SBHED(NS+L,N),L=1,NBDTIM)
      DO 166 L=1,NBDTIM
      SBHED(NS+L,N)=SBHED(NS+L,N)*CNSTM
 166  CONTINUE
!!      WRITE(IOUT,*) 
!!     &      '(IHDLOC(I,N),I=1,4),(SBHED(NS+L,N),L=1,NBDTIM):'
!!      WRITE(IOUT,*) 
!!     &      (IHDLOC(I,N),I=1,4),(SBHED(NS+L,N),L=1,NBDTIM)
C
C9B------IF DESIRED, PRINT TABLE OF AUXILIARY VARIABLE VALUES AT
C9B------SPECIFIED-HEAD CELL LOCATIONS
!      IF(IFHBPT.GT.0) THEN
!         WRITE(IOUT,58) (IHDLOC(I,N),I=1,4),
!     &                        (SBHED(NS+L,N),L=1,NBDTIM)
!      ENDIF
 168  CONTINUE
 169  CONTINUE
C
C10-----RETURN
 300  CALL SGWF2FHB7PSV(IGRID)
      RETURN
      END
!      SUBROUTINE GWF2FHB7AD(IGRID)
C     ******************************************************************
C     COMPUTE SPECIFIED FLOWS AND HEADS AT CURRENT TIME STEP
C     ******************************************************************
!      SUBROUTINE GWF2FHB7FM(IGRID)
C     ******************************************************************
C     SUBTRACT SPECIFIED Q FROM RHS
C     ******************************************************************
!      SUBROUTINE GWF2FHB7BD(KSTP,KPER,IGRID)
C     ******************************************************************
C     CALCULATE VOLUMETRIC BUDGET FOR SPECIFIED FLOWS
C     ******************************************************************
      SUBROUTINE GWF2FHB7DA(IGRID)
C  Deallocate FHB DATA
      USE GWFFHBMODULE
C
        DEALLOCATE(GWFFHBDAT(IGRID)%NBDTIM)
        DEALLOCATE(GWFFHBDAT(IGRID)%NFLW)
        DEALLOCATE(GWFFHBDAT(IGRID)%NHED)
        DEALLOCATE(GWFFHBDAT(IGRID)%IFHBCB)
        DEALLOCATE(GWFFHBDAT(IGRID)%NFHBX1)
        DEALLOCATE(GWFFHBDAT(IGRID)%NFHBX2)
        DEALLOCATE(GWFFHBDAT(IGRID)%IFHBSS)
        DEALLOCATE(GWFFHBDAT(IGRID)%FHBXWT)
        DEALLOCATE(GWFFHBDAT(IGRID)%FHBXNM)
        DEALLOCATE(GWFFHBDAT(IGRID)%BDTIM)
        DEALLOCATE(GWFFHBDAT(IGRID)%FLWRAT)
        DEALLOCATE(GWFFHBDAT(IGRID)%BDFV)
        DEALLOCATE(GWFFHBDAT(IGRID)%IFLLOC)
        DEALLOCATE(GWFFHBDAT(IGRID)%SBHED)
        DEALLOCATE(GWFFHBDAT(IGRID)%BDHV)
        DEALLOCATE(GWFFHBDAT(IGRID)%IHDLOC)
C
      RETURN
      END
      SUBROUTINE SGWF2FHB7PNT(IGRID)
C  Set pointers to FHB data for grid.
      USE GWFFHBMODULE
C
        NBDTIM=>GWFFHBDAT(IGRID)%NBDTIM
        NFLW=>GWFFHBDAT(IGRID)%NFLW
        NHED=>GWFFHBDAT(IGRID)%NHED
        IFHBCB=>GWFFHBDAT(IGRID)%IFHBCB
        NFHBX1=>GWFFHBDAT(IGRID)%NFHBX1
        NFHBX2=>GWFFHBDAT(IGRID)%NFHBX2
        IFHBSS=>GWFFHBDAT(IGRID)%IFHBSS
        FHBXWT=>GWFFHBDAT(IGRID)%FHBXWT
        FHBXNM=>GWFFHBDAT(IGRID)%FHBXNM
        BDTIM=>GWFFHBDAT(IGRID)%BDTIM
        FLWRAT=>GWFFHBDAT(IGRID)%FLWRAT
        BDFV=>GWFFHBDAT(IGRID)%BDFV
        IFLLOC=>GWFFHBDAT(IGRID)%IFLLOC
        SBHED=>GWFFHBDAT(IGRID)%SBHED
        BDHV=>GWFFHBDAT(IGRID)%BDHV
        IHDLOC=>GWFFHBDAT(IGRID)%IHDLOC
C
      RETURN
      END
      SUBROUTINE SGWF2FHB7PSV(IGRID)
C  Save pointers to FHB data for grid.
      USE GWFFHBMODULE
C
        GWFFHBDAT(IGRID)%NBDTIM=>NBDTIM
        GWFFHBDAT(IGRID)%NFLW=>NFLW
        GWFFHBDAT(IGRID)%NHED=>NHED
        GWFFHBDAT(IGRID)%IFHBCB=>IFHBCB
        GWFFHBDAT(IGRID)%NFHBX1=>NFHBX1
        GWFFHBDAT(IGRID)%NFHBX2=>NFHBX2
        GWFFHBDAT(IGRID)%IFHBSS=>IFHBSS
        GWFFHBDAT(IGRID)%FHBXWT=>FHBXWT
        GWFFHBDAT(IGRID)%FHBXNM=>FHBXNM
        GWFFHBDAT(IGRID)%BDTIM=>BDTIM
        GWFFHBDAT(IGRID)%FLWRAT=>FLWRAT
        GWFFHBDAT(IGRID)%BDFV=>BDFV
        GWFFHBDAT(IGRID)%IFLLOC=>IFLLOC
        GWFFHBDAT(IGRID)%SBHED=>SBHED
        GWFFHBDAT(IGRID)%BDHV=>BDHV
        GWFFHBDAT(IGRID)%IHDLOC=>IHDLOC
C
      RETURN
      END
